# wait, what if we have a lower alpha
# type I error
length(output[output < 0.001]) / sim.reps
# plot distribution of p. values:
tibble(p.value = output[output < 0.001], n = nsamples) %>%
ggplot(aes(x = factor(n), y = p.value)) +
ggbeeswarm::geom_quasirandom(width = 0.2, alpha = 0.5)
min(output)
min(output) * nsamples
min(output) * sim.reps
output[output < 0.0001]
7/100000
20 * 50
20*2.65
95+53
25*2.65
7.5/12
capabilities()
tinytex::parse_install()
tinytex::parse_install("Whitehall_LOI_2022.log")
here::here()
tinytex::parse_install("Users/mo555/git/grants/2022/Whitehall/Whitehall_LOI_2022.log")
tinytex::parse_install("Users/mo555/git/grants/2022/Whitehall/Whitehall_LOI_2022.log")
tinytex::parse_install("/Users/mo555/git/grants/2022/Whitehall/Whitehall_LOI_2022.log")
tinytex::parse_install("/Users/mo555/git/grants/2022/Whitehall/Whitehall_LOI.log")
14/18
14/19
14/18
tinytex::parse_install("/Users/mo555/git/grants/2022/Whitehall/Whitehall_LOI.log")
tinytex::parse_install("/Users/mo555/git/grants/2022/Whitehall/Whitehall_LOI.log")
tinytex::tlmgr_install('/sourcesanspro.sty')
tinytex::reinstall_tinytex()
wordcountaddin::word_count()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(patchwork)
library(ggbeeswarm)
library(kableExtra)
library(magrittr)
library(viridis)
theme_set(theme_classic())
AntTouch <- read_csv('cest1.2_anterior_touch_merged.csv') %>%
mutate(plate = as.factor(plate))
dates_contaminated <- c("7/7/2021","7/8/2021","7/14/2021","7/15/2021", "12/7/2021")
genotypes <- c("N2",
"cest-1.2")
data1 <- AntTouch %>%
# filter to get subset of genotypes and conditions
filter(genotype %in% genotypes,
food == "OP50",
is.na(additive),
culture_conditons == "none",
!date %in% dates_contaminated,
is.na(note),
is.na(transfer_technique)) %>%
mutate(genotype = fct_relevel(genotype,
genotypes))
data1 %>%
ggplot(aes(x =genotype, y = bends, fill = genotype)) +
#geom_boxplot() +
stat_summary(geom = "bar", fun = "mean", width = 0.5) +
# ggbeeswarm::geom_quasirandom(aes(group = genotype),
#                              width = .1,
#                              alpha = 0.3,
#                              dodge.width = .75) +
stat_summary(aes(),
geom = "errorbar",
fun.data = "mean_se",
width = 0.1,
position = position_dodge(width = 1.6)) +
scale_fill_manual(values = c("grey", "purple")) +
labs(title = "Body bends in anterior touch response",
y = "number of body bends per reversal") +
guides(fill = "none")
data1 %$%
t.test(bends ~ genotype)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(patchwork)
library(ggbeeswarm)
library(kableExtra)
library(magrittr)
library(viridis)
theme_set(theme_classic())
AntTouch <- read_csv('cest1.2_anterior_touch_merged.csv') %>%
mutate(plate = as.factor(plate))
dates_contaminated <- c("7/7/2021","7/8/2021","7/14/2021","7/15/2021", "12/7/2021")
genotypes <- c("N2",
"cest-1.2",
"tdc-1")
data1 <- AntTouch %>%
# filter to get subset of genotypes and conditions
filter(genotype %in% genotypes,
food == "OP50",
is.na(additive),
culture_conditons == "none",
!date %in% dates_contaminated,
is.na(note),
is.na(transfer_technique)) %>%
mutate(genotype = fct_relevel(genotype,
genotypes))
data1 %>%
ggplot(aes(x =genotype, y = bends, fill = genotype)) +
#geom_boxplot() +
stat_summary(geom = "bar", fun = "mean", width = 0.5) +
# ggbeeswarm::geom_quasirandom(aes(group = genotype),
#                              width = .1,
#                              alpha = 0.3,
#                              dodge.width = .75) +
stat_summary(aes(),
geom = "errorbar",
fun.data = "mean_se",
width = 0.1,
position = position_dodge(width = 1.6)) +
scale_fill_manual(values = c("grey", "purple")) +
labs(title = "Body bends in anterior touch response",
y = "number of body bends per reversal") +
guides(fill = "none")
data1 %$%
t.test(bends ~ genotype)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(patchwork)
library(ggbeeswarm)
library(kableExtra)
library(magrittr)
library(viridis)
theme_set(theme_classic())
AntTouch <- read_csv('cest1.2_anterior_touch_merged.csv') %>%
mutate(plate = as.factor(plate))
dates_contaminated <- c("7/7/2021","7/8/2021","7/14/2021","7/15/2021", "12/7/2021")
genotypes <- c("N2",
"cest-1.2",
"tdc-1")
data1 <- AntTouch %>%
# filter to get subset of genotypes and conditions
filter(genotype %in% genotypes,
food == "OP50",
is.na(additive),
culture_conditons == "none",
!date %in% dates_contaminated,
is.na(note),
is.na(transfer_technique)) %>%
mutate(genotype = fct_relevel(genotype,
genotypes))
data1 %>%
ggplot(aes(x =genotype, y = bends, fill = genotype)) +
#geom_boxplot() +
stat_summary(geom = "bar", fun = "mean", width = 0.5) +
# ggbeeswarm::geom_quasirandom(aes(group = genotype),
#                              width = .1,
#                              alpha = 0.3,
#                              dodge.width = .75) +
stat_summary(aes(),
geom = "errorbar",
fun.data = "mean_se",
width = 0.1,
position = position_dodge(width = 1.6)) +
scale_fill_manual(values = c("grey", "purple")) +
labs(title = "Body bends in anterior touch response",
y = "number of body bends per reversal") +
guides(fill = "none")
data1 %$%
t.test(bends ~ genotype)
data1 %>%
lm(bends ~ genotype)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(patchwork)
library(ggbeeswarm)
library(kableExtra)
library(magrittr)
library(viridis)
theme_set(theme_classic())
AntTouch <- read_csv('cest1.2_anterior_touch_merged.csv') %>%
mutate(plate = as.factor(plate))
dates_contaminated <- c("7/7/2021","7/8/2021","7/14/2021","7/15/2021", "12/7/2021")
genotypes <- c("N2",
"cest-1.2",
"tdc-1")
data1 <- AntTouch %>%
# filter to get subset of genotypes and conditions
filter(genotype %in% genotypes,
food == "OP50",
is.na(additive),
culture_conditons == "none",
!date %in% dates_contaminated,
is.na(note),
is.na(transfer_technique)) %>%
mutate(genotype = fct_relevel(genotype,
genotypes))
data1 %>%
ggplot(aes(x =genotype, y = bends, fill = genotype)) +
#geom_boxplot() +
stat_summary(geom = "bar", fun = "mean", width = 0.5) +
# ggbeeswarm::geom_quasirandom(aes(group = genotype),
#                              width = .1,
#                              alpha = 0.3,
#                              dodge.width = .75) +
stat_summary(aes(),
geom = "errorbar",
fun.data = "mean_se",
width = 0.1,
position = position_dodge(width = 1.6)) +
scale_fill_manual(values = c("grey", "purple")) +
labs(title = "Body bends in anterior touch response",
y = "number of body bends per reversal") +
guides(fill = "none")
data1 %>%
lm(bends ~ genotype)
data1 %>%
lm(data =., bends ~ genotype)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(patchwork)
library(ggbeeswarm)
library(kableExtra)
library(magrittr)
library(viridis)
theme_set(theme_classic())
AntTouch <- read_csv('cest1.2_anterior_touch_merged.csv') %>%
mutate(plate = as.factor(plate))
dates_contaminated <- c("7/7/2021","7/8/2021","7/14/2021","7/15/2021", "12/7/2021")
genotypes <- c("N2",
"cest-1.2",
"tdc-1")
data1 <- AntTouch %>%
# filter to get subset of genotypes and conditions
filter(genotype %in% genotypes,
food == "OP50",
is.na(additive),
culture_conditons == "none",
!date %in% dates_contaminated,
is.na(note),
is.na(transfer_technique)) %>%
mutate(genotype = fct_relevel(genotype,
genotypes))
data1 %>%
ggplot(aes(x =genotype, y = bends, fill = genotype)) +
#geom_boxplot() +
stat_summary(geom = "bar", fun = "mean", width = 0.5) +
# ggbeeswarm::geom_quasirandom(aes(group = genotype),
#                              width = .1,
#                              alpha = 0.3,
#                              dodge.width = .75) +
stat_summary(aes(),
geom = "errorbar",
fun.data = "mean_se",
width = 0.1,
position = position_dodge(width = 1.6)) +
scale_fill_manual(values = c("grey", "purple")) +
labs(title = "Body bends in anterior touch response",
y = "number of body bends per reversal") +
guides(fill = "none")
data1 %>%
lm(data =., bends ~ genotype)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(patchwork)
library(ggbeeswarm)
library(kableExtra)
library(magrittr)
library(viridis)
theme_set(theme_classic())
AntTouch <- read_csv('cest1.2_anterior_touch_merged.csv') %>%
mutate(plate = as.factor(plate))
dates_contaminated <- c("7/7/2021","7/8/2021","7/14/2021","7/15/2021", "12/7/2021")
genotypes <- c("N2",
"cest-1.2",
"tdc-1")
data1 <- AntTouch %>%
# filter to get subset of genotypes and conditions
filter(genotype %in% genotypes,
food == "OP50",
is.na(additive),
culture_conditons == "none",
!date %in% dates_contaminated,
is.na(note),
is.na(transfer_technique)) %>%
mutate(genotype = fct_relevel(genotype,
genotypes))
data1 %>%
ggplot(aes(x =genotype, y = bends, fill = genotype)) +
#geom_boxplot() +
stat_summary(geom = "bar", fun = "mean", width = 0.5) +
# ggbeeswarm::geom_quasirandom(aes(group = genotype),
#                              width = .1,
#                              alpha = 0.3,
#                              dodge.width = .75) +
stat_summary(aes(),
geom = "errorbar",
fun.data = "mean_se",
width = 0.1,
position = position_dodge(width = 1.6)) +
scale_fill_manual(values = c("grey", "purple")) +
labs(title = "Body bends in anterior touch response",
y = "number of body bends per reversal") +
guides(fill = "none")
data1 %>%
ggplot(aes(x =genotype, y = bends, fill = genotype)) +
#geom_boxplot() +
stat_summary(geom = "bar", fun = "mean", width = 0.5) +
# ggbeeswarm::geom_quasirandom(aes(group = genotype),
#                              width = .1,
#                              alpha = 0.3,
#                              dodge.width = .75) +
stat_summary(aes(),
geom = "errorbar",
fun.data = "mean_se",
width = 0.1,
position = position_dodge(width = 1.6)) +
scale_fill_manual(values = c("grey", "oragne", "lightorange")) +
labs(title = "Body bends in anterior touch response",
y = "number of body bends per reversal") +
guides(fill = "none")
data1 %>%
ggplot(aes(x =genotype, y = bends, fill = genotype)) +
#geom_boxplot() +
stat_summary(geom = "bar", fun = "mean", width = 0.5) +
# ggbeeswarm::geom_quasirandom(aes(group = genotype),
#                              width = .1,
#                              alpha = 0.3,
#                              dodge.width = .75) +
stat_summary(aes(),
geom = "errorbar",
fun.data = "mean_se",
width = 0.1,
position = position_dodge(width = 1.6)) +
scale_fill_manual(values = c("grey", "orange", "lightorange")) +
labs(title = "Body bends in anterior touch response",
y = "number of body bends per reversal") +
guides(fill = "none")
data1 %>%
ggplot(aes(x =genotype, y = bends, fill = genotype)) +
#geom_boxplot() +
stat_summary(geom = "bar", fun = "mean", width = 0.5) +
# ggbeeswarm::geom_quasirandom(aes(group = genotype),
#                              width = .1,
#                              alpha = 0.3,
#                              dodge.width = .75) +
stat_summary(aes(),
geom = "errorbar",
fun.data = "mean_se",
width = 0.1,
position = position_dodge(width = 1.6)) +
scale_fill_manual(values = c("grey", "darkorange", "orange")) +
labs(title = "Body bends in anterior touch response",
y = "number of body bends per reversal") +
guides(fill = "none")
data1 %>%
ggplot(aes(x =genotype, y = bends, fill = genotype)) +
#geom_boxplot() +
stat_summary(geom = "bar", fun = "mean", width = 0.5) +
# ggbeeswarm::geom_quasirandom(aes(group = genotype),
#                              width = .1,
#                              alpha = 0.3,
#                              dodge.width = .75) +
stat_summary(aes(),
geom = "errorbar",
fun.data = "mean_se",
width = 0.1,
position = position_dodge(width = 1.6)) +
scale_fill_manual(values = c("grey", "darkorange2", "orange")) +
labs(title = "Body bends in anterior touch response",
y = "number of body bends per reversal") +
guides(fill = "none")
library(tidyverse)
library(patchwork)
library(ggbeeswarm)
library(kableExtra)
library(magrittr)
library(viridis)
theme_set(theme_classic())
library("rstudioapi")
setwd(dirname(getActiveDocumentContext()$path))
oct_avoid <- read_csv("./data/octanol_30pct_avoidance_ALLDATA.csv")
oct_avoid %>%
group_by(date, genotype) %>%
tally()
oct_avoid %>%
filter(experimenter == "TB") %>%
mutate(genotype = fct_relevel(genotype, "N2")) %>%
ggplot(aes(x = genotype, y = response.time, fill = genotype)) +
stat_summary(geom = "bar", fun = "mean", width = 0.5) +
# ggbeeswarm::geom_quasirandom(aes(group = genotype),
#                              width = .1,
#                              alpha = 0.3,
#                              dodge.width = .75) +
stat_summary(aes(),
geom = "errorbar",
fun.data = "mean_se",
width = 0.1,
position = position_dodge(width = 1.6)) +
scale_fill_manual(values = c("grey", "purple")) +
labs(title = "",
y = "response time (s)") +
guides(fill = "none") #+
facet_wrap(.~date+ experimenter)
library(rstanarm)
ncores = options(mc.cores = parallel::detectCores())
mod <- oct_avoid %>%
filter(experimenter == "TB") %>%
mutate(genotype = fct_relevel(genotype, "N2")) %>%
# lme4::lmer(data = .,
#             response.time ~ genotype + (1|date)) %>%
rstanarm::stan_lmer(data = .,
formula = response.time ~ genotype + (1|date)) #%>%
mod %>% emmeans::ref_grid() %>%
emmeans::contrast(method = "pairwise")
oct_avoid <- read_csv("./data/octanol_30pct_avoidance_ALLDATA.csv")
oct_avoid %>%
group_by(date, genotype) %>%
tally()
oct_avoid %>%
filter(experimenter == "TB") %>%
mutate(genotype = fct_relevel(genotype, "N2")) %>%
ggplot(aes(x = genotype, y = response.time, fill = genotype)) +
stat_summary(geom = "bar", fun = "mean", width = 0.5) +
# ggbeeswarm::geom_quasirandom(aes(group = genotype),
#                              width = .1,
#                              alpha = 0.3,
#                              dodge.width = .75) +
stat_summary(aes(),
geom = "errorbar",
fun.data = "mean_se",
width = 0.1,
position = position_dodge(width = 1.6)) +
scale_fill_manual(values = c("grey", "purple")) +
labs(title = "",
y = "response time (s)") +
guides(fill = "none") #+
scale_fill_manual(values = c("grey", "darkpurple", "lightpurple") +
oct_avoid %>%
oct_avoid %>%
filter(experimenter == "TB") %>%
mutate(genotype = fct_relevel(genotype, "N2")) %>%
ggplot(aes(x = genotype, y = response.time, fill = genotype)) +
stat_summary(geom = "bar", fun = "mean", width = 0.5) +
# ggbeeswarm::geom_quasirandom(aes(group = genotype),
#                              width = .1,
#                              alpha = 0.3,
#                              dodge.width = .75) +
stat_summary(aes(),
geom = "errorbar",
fun.data = "mean_se",
width = 0.1,
position = position_dodge(width = 1.6)) +
scale_fill_manual(values = c("grey", "darkpurple", "lightpurple")) +
labs(title = "",
y = "response time (s)") +
guides(fill = "none") #+
oct_avoid %>%
filter(experimenter == "TB") %>%
mutate(genotype = fct_relevel(genotype, "N2")) %>%
ggplot(aes(x = genotype, y = response.time, fill = genotype)) +
stat_summary(geom = "bar", fun = "mean", width = 0.5) +
# ggbeeswarm::geom_quasirandom(aes(group = genotype),
#                              width = .1,
#                              alpha = 0.3,
#                              dodge.width = .75) +
stat_summary(aes(),
geom = "errorbar",
fun.data = "mean_se",
width = 0.1,
position = position_dodge(width = 1.6)) +
scale_fill_manual(values = c("grey", "darkorchid4", "darkorchid1")) +
labs(title = "",
y = "response time (s)") +
guides(fill = "none") #+
oct_avoid %>%
group_by(date, genotype) %>%
tally()
oct_avoid %>%
group_by(date, genotype) %>%
tally() %>% tail
oct_avoid %>%
filter(#experimenter == "TB"
date == "2022-04-05") %>%
mutate(genotype = fct_relevel(genotype, "N2")) %>%
ggplot(aes(x = genotype, y = response.time, fill = genotype)) +
stat_summary(geom = "bar", fun = "mean", width = 0.5) +
# ggbeeswarm::geom_quasirandom(aes(group = genotype),
#                              width = .1,
#                              alpha = 0.3,
#                              dodge.width = .75) +
stat_summary(aes(),
geom = "errorbar",
fun.data = "mean_se",
width = 0.1,
position = position_dodge(width = 1.6)) +
scale_fill_manual(values = c("grey", "darkorchid4", "darkorchid1")) +
labs(title = "",
y = "response time (s)") +
guides(fill = "none") #+
mod <- oct_avoid %>%
filter(#experimenter == "TB",
date == "2022-04-05") %>%
mutate(genotype = fct_relevel(genotype, "N2")) %>%
# lme4::lmer(data = .,
#             response.time ~ genotype + (1|date)) %>%
rstanarm::stan_lmer(data = .,
formula = response.time ~ genotype + (1|experimenter)) #%>%
mod %>% emmeans::ref_grid() %>%
emmeans::contrast(method = "pairwise")
oct_avoid %>%
filter(#experimenter == "TB",
date == "2022-04-05") %>%
lm(data = ., response.time ~ genotype) %>%
emmeans::ref_grid() %>%
emmeans::contrast(method = "pairwise")
knit_with_parameters('~/git/grants/2022/Whitehall/Whitehall_LOI.Rmd')
2/12
